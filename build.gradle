group 'com.avioconsulting'
version '1.0-SNAPSHOT'

configurations {
    provided
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

sourceCompatibility = 1.5

repositories {
    mavenLocal()
    mavenCentral()
}

task pluginDescriptor(type: Exec) {
    commandLine 'mvn', '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:3.2:descriptor'
    def findDependencies = { pomNode ->
        pomNode.dependencies.dependency.findAll { d ->
            def value = d.artifactId[0].value()[0]
            value == 'mdsrt' || value == 'weblogic-maven-plugin'
        }
    }

    def existingScope = null
    doFirst {
        def pom = project.file('pom.xml')
        install.repositories.mavenInstaller.pom.writeTo(pom)
        assert pom.file, "[$pom.canonicalPath] was not created"
        def pomNode = new XmlParser().parse(pom)
        pomNode.groupId[0].value = project.group
        pomNode.artifactId[0].value = project.name
        pomNode.version[0].value = version
        pomNode.appendNode('packaging', 'maven-plugin')
        def buildNode = pomNode.appendNode('build')
        buildNode.appendNode('directory', '\${project.basedir}/build')
        buildNode.appendNode('outputDirectory', '\${project.build.directory}/classes/main')

        // descriptor plugin doesn't like scanning this, so exclude it from scope temporarily
        findDependencies(pomNode).each {wlDependency ->
            existingScope = wlDependency.scope[0].value()[0]
            wlDependency.scope[0].value = 'test'
        }
        groovy.xml.XmlUtil.serialize(pomNode, new FileWriter(pom))
    }
    doLast {
        def pom = project.file('pom.xml')
        Node pomNode = new XmlParser().parse(pom)
        findDependencies(pomNode).each {wlDependency ->
            // put the scope back
            wlDependency.scope[0].value = existingScope
        }
        groovy.xml.XmlUtil.serialize(pomNode, new FileWriter(pom))
        final pluginDescriptor = new File((File) project.compileGroovy.destinationDir, 'META-INF/maven/plugin.xml')
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}

project.compileGroovy.doLast { pluginDescriptor.execute() }

dependencies {
    compile 'commons-io:commons-io:1.3.2'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.apache.maven:maven-plugin-api:3.3.9'
    compile 'joda-time:joda-time:2.9.6'
    compile 'net.objectlab.kit:datecalc-joda:1.4.0'
    compile 'com.oracle.ess:ess-thin-client:12.2.1-2-0'
    // begin oracle dependencies not declared in ess-thin-client
    compile 'com.oracle.ess:ess-sec:12.2.1-2-0'
    compile 'com.oracle.fmwshare:mdsrt:12.2.1-2-0'
    runtime 'com.oracle.fmwshare:ojdl:12.2.1-2-0'
    // Easiest way to get dependencies for EJB w/ Weblogic
    def wlMaven = 'com.oracle.weblogic:weblogic-maven-plugin:12.2.1-2-0'
    runtime wlMaven
    testCompile wlMaven
    // end ess-thin-client deps
    provided 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.5'
    def mvnProject = 'org.apache.maven:maven-project:3.0-alpha-2'
    // use explicitly in tests but Maven will provide the dependency at runtime
    provided mvnProject
    testCompile mvnProject
    compile 'org.codehaus.groovy:groovy-all:2.4.6'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.apache.commons:commons-io:1.3.2'
}
